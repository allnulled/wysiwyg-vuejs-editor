/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function(root, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof module === "object" && module.exports) {
    module.exports = factory();
  } else {
    root.Editor_wysiwyg_vuejs_parser = factory();
  }
})(this, function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Lenguaje: peg$parseLenguaje },
        peg$startRuleFunction  = peg$parseLenguaje,

        peg$c0 = function(tokens) { return reducir_texto_valido(tokens) },
        peg$c1 = function(tag) { return tag },
        peg$c2 = "\\",
        peg$c3 = peg$literalExpectation("\\", false),
        peg$c4 = function(escape, tag) { return tag },
        peg$c5 = peg$anyExpectation(),
        peg$c6 = function(texto) { return reducir_texto_normal(text()) },
        peg$c7 = "[/",
        peg$c8 = peg$literalExpectation("[/", false),
        peg$c9 = "[negrita",
        peg$c10 = peg$literalExpectation("[negrita", false),
        peg$c11 = "]",
        peg$c12 = peg$literalExpectation("]", false),
        peg$c13 = "[/negrita]",
        peg$c14 = peg$literalExpectation("[/negrita]", false),
        peg$c15 = function(apertura, atributos, cierre, contenido, cierre_de_tag) { return reducir_tag({ apertura, atributos, contenido })},
        peg$c16 = "[cursiva",
        peg$c17 = peg$literalExpectation("[cursiva", false),
        peg$c18 = "[/cursiva]",
        peg$c19 = peg$literalExpectation("[/cursiva]", false),
        peg$c20 = "[subrayado",
        peg$c21 = peg$literalExpectation("[subrayado", false),
        peg$c22 = "[/subrayado]",
        peg$c23 = peg$literalExpectation("[/subrayado]", false),
        peg$c24 = "[tachado",
        peg$c25 = peg$literalExpectation("[tachado", false),
        peg$c26 = "[/tachado]",
        peg$c27 = peg$literalExpectation("[/tachado]", false),
        peg$c28 = "[fuente",
        peg$c29 = peg$literalExpectation("[fuente", false),
        peg$c30 = "[/fuente]",
        peg$c31 = peg$literalExpectation("[/fuente]", false),
        peg$c32 = "[color_de_fondo",
        peg$c33 = peg$literalExpectation("[color_de_fondo", false),
        peg$c34 = "[/color_de_fondo]",
        peg$c35 = peg$literalExpectation("[/color_de_fondo]", false),
        peg$c36 = "[color_de_letra",
        peg$c37 = peg$literalExpectation("[color_de_letra", false),
        peg$c38 = "[/color_de_letra]",
        peg$c39 = peg$literalExpectation("[/color_de_letra]", false),
        peg$c40 = "[alineado",
        peg$c41 = peg$literalExpectation("[alineado", false),
        peg$c42 = "[/alineado]",
        peg$c43 = peg$literalExpectation("[/alineado]", false),
        peg$c44 = "[lista_ordenada",
        peg$c45 = peg$literalExpectation("[lista_ordenada", false),
        peg$c46 = "[/lista_ordenada]",
        peg$c47 = peg$literalExpectation("[/lista_ordenada]", false),
        peg$c48 = "[punto",
        peg$c49 = peg$literalExpectation("[punto", false),
        peg$c50 = "[/punto]",
        peg$c51 = peg$literalExpectation("[/punto]", false),
        peg$c52 = "[lista_desordenada",
        peg$c53 = peg$literalExpectation("[lista_desordenada", false),
        peg$c54 = "[/lista_desordenada]",
        peg$c55 = peg$literalExpectation("[/lista_desordenada]", false),
        peg$c56 = "[flotacion",
        peg$c57 = peg$literalExpectation("[flotacion", false),
        peg$c58 = "[/flotacion]",
        peg$c59 = peg$literalExpectation("[/flotacion]", false),
        peg$c60 = "[link",
        peg$c61 = peg$literalExpectation("[link", false),
        peg$c62 = "[/link]",
        peg$c63 = peg$literalExpectation("[/link]", false),
        peg$c64 = "[imagen",
        peg$c65 = peg$literalExpectation("[imagen", false),
        peg$c66 = "[/imagen]",
        peg$c67 = peg$literalExpectation("[/imagen]", false),
        peg$c68 = "[codigo",
        peg$c69 = peg$literalExpectation("[codigo", false),
        peg$c70 = "[/codigo]",
        peg$c71 = peg$literalExpectation("[/codigo]", false),
        peg$c72 = "[tabla",
        peg$c73 = peg$literalExpectation("[tabla", false),
        peg$c74 = "[/tabla]",
        peg$c75 = peg$literalExpectation("[/tabla]", false),
        peg$c76 = "[fila",
        peg$c77 = peg$literalExpectation("[fila", false),
        peg$c78 = "[/fila]",
        peg$c79 = peg$literalExpectation("[/fila]", false),
        peg$c80 = "[celda",
        peg$c81 = peg$literalExpectation("[celda", false),
        peg$c82 = "[/celda]",
        peg$c83 = peg$literalExpectation("[/celda]", false),
        peg$c84 = "=",
        peg$c85 = peg$literalExpectation("=", false),
        peg$c86 = function(espacio, atributo, igual, valor) { return { atributo, valor } },
        peg$c87 = /^[A-Za-z0-9]/,
        peg$c88 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"]], false, false),
        peg$c89 = "_",
        peg$c90 = peg$literalExpectation("_", false),
        peg$c91 = "-",
        peg$c92 = peg$literalExpectation("-", false),
        peg$c93 = "$",
        peg$c94 = peg$literalExpectation("$", false),
        peg$c95 = function(nombre) { return text() },
        peg$c96 = "\"",
        peg$c97 = peg$literalExpectation("\"", false),
        peg$c98 = function(apertura, contenido, cierre) { return contenido },
        peg$c99 = function(texto) { return text() },
        peg$c100 = " ",
        peg$c101 = peg$literalExpectation(" ", false),
        peg$c102 = "\t",
        peg$c103 = peg$literalExpectation("\t", false),
        peg$c104 = "\r\n",
        peg$c105 = peg$literalExpectation("\r\n", false),
        peg$c106 = "\r",
        peg$c107 = peg$literalExpectation("\r", false),
        peg$c108 = "\n",
        peg$c109 = peg$literalExpectation("\n", false),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseLenguaje() {
      var s0;

      s0 = peg$parseTexto_valido();

      return s0;
    }

    function peg$parseTexto_valido() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseTag();
      if (s2 === peg$FAILED) {
        s2 = peg$parseTag_escapado();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTexto_normal();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseTag();
        if (s2 === peg$FAILED) {
          s2 = peg$parseTag_escapado();
          if (s2 === peg$FAILED) {
            s2 = peg$parseTexto_normal();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTag() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseTag_negrita();
      if (s1 === peg$FAILED) {
        s1 = peg$parseTag_cursiva();
        if (s1 === peg$FAILED) {
          s1 = peg$parseTag_subrayado();
          if (s1 === peg$FAILED) {
            s1 = peg$parseTag_tachado();
            if (s1 === peg$FAILED) {
              s1 = peg$parseTag_fuente();
              if (s1 === peg$FAILED) {
                s1 = peg$parseTag_color_de_fondo();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseTag_color_de_letra();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseTag_alineado();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parseTag_lista_ordenada();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseTag_punto();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseTag_lista_desordenada();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parseTag_flotacion();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseTag_link();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parseTag_imagen();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseTag_codigo();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseTag_tabla();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parseTag_fila();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseTag_celda();
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseTag_escapado() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c2;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseTag();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c4(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTexto_normal() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseTag();
      if (s3 === peg$FAILED) {
        s3 = peg$parseTag_escapado();
        if (s3 === peg$FAILED) {
          s3 = peg$parseCierre_de_tag();
        }
      }
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseCierre_de_tag() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c7) {
        s0 = peg$c7;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }

      return s0;
    }

    function peg$parseTag_negrita() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c9) {
        s1 = peg$c9;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c13) {
                s5 = peg$c13;
                peg$currPos += 10;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c14); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_cursiva() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c16) {
        s1 = peg$c16;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c18) {
                s5 = peg$c18;
                peg$currPos += 10;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_subrayado() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c20) {
        s1 = peg$c20;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 12) === peg$c22) {
                s5 = peg$c22;
                peg$currPos += 12;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c23); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_tachado() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c24) {
        s1 = peg$c24;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 10) === peg$c26) {
                s5 = peg$c26;
                peg$currPos += 10;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c27); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_fuente() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c28) {
        s1 = peg$c28;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c30) {
                s5 = peg$c30;
                peg$currPos += 9;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c31); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_color_de_fondo() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c32) {
        s1 = peg$c32;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 17) === peg$c34) {
                s5 = peg$c34;
                peg$currPos += 17;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_color_de_letra() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c36) {
        s1 = peg$c36;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 17) === peg$c38) {
                s5 = peg$c38;
                peg$currPos += 17;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c39); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_alineado() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c40) {
        s1 = peg$c40;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 11) === peg$c42) {
                s5 = peg$c42;
                peg$currPos += 11;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_lista_ordenada() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 15) === peg$c44) {
        s1 = peg$c44;
        peg$currPos += 15;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 17) === peg$c46) {
                s5 = peg$c46;
                peg$currPos += 17;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c47); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_punto() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c48) {
        s1 = peg$c48;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c50) {
                s5 = peg$c50;
                peg$currPos += 8;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c51); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_lista_desordenada() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c52) {
        s1 = peg$c52;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 20) === peg$c54) {
                s5 = peg$c54;
                peg$currPos += 20;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c55); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_flotacion() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c56) {
        s1 = peg$c56;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 12) === peg$c58) {
                s5 = peg$c58;
                peg$currPos += 12;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c59); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_link() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c62) {
                s5 = peg$c62;
                peg$currPos += 7;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c63); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_imagen() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c64) {
        s1 = peg$c64;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c66) {
                s5 = peg$c66;
                peg$currPos += 9;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c67); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_codigo() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c68) {
        s1 = peg$c68;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c70) {
                s5 = peg$c70;
                peg$currPos += 9;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c71); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_tabla() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c72) {
        s1 = peg$c72;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c73); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c74) {
                s5 = peg$c74;
                peg$currPos += 8;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c75); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_fila() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c76) {
        s1 = peg$c76;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c78) {
                s5 = peg$c78;
                peg$currPos += 7;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTag_celda() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c80) {
        s1 = peg$c80;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseAtributos();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseAtributos();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c11;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseTexto_valido();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 8) === peg$c82) {
                s5 = peg$c82;
                peg$currPos += 8;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c83); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c15(s1, s2, s3, s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseAtributos() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNombre_de_atributo();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c84;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseValor_de_atributo();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c86(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNombre_de_atributo() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c87.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s2 = peg$c89;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c91;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c92); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 36) {
              s2 = peg$c93;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c94); }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c87.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s2 = peg$c89;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c90); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s2 = peg$c91;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c92); }
              }
              if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 36) {
                  s2 = peg$c93;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c94); }
                }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c95(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseValor_de_atributo() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c96;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseNegacion_de_dobles_comillas();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c96;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c98(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseNegacion_de_dobles_comillas() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s4 = peg$c96;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 34) {
            s4 = peg$c96;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c99(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parse_() {
      var s0;

      s0 = peg$parse__();
      if (s0 === peg$FAILED) {
        s0 = peg$parse___();
      }

      return s0;
    }

    function peg$parse__() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c100;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s0 = peg$c102;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c103); }
        }
      }

      return s0;
    }

    function peg$parse___() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c104) {
        s0 = peg$c104;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c105); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c106;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c107); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 10) {
            s0 = peg$c108;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c109); }
          }
        }
      }

      return s0;
    }


        const comprobar_atributo = function(atributo, validos) {
            return validos.indexOf(atributo) !== -1;
        };
        const sanitizar_dobles_comillas = function(atributo) {
            return atributo.replace('"', "");
        };
        const reducir_nombre_de_tag = function(tag) {
            if(tag === "negrita") {
                return "b";
            } else if(tag === "cursiva") {
                return "i";
            } else if(tag === "subrayado") {
                return "u";
            } else if(tag === "tachado") {
                return "del";
            } else if(tag === "fuente") {
                return "span";
            } else if(tag === "color_de_fondo") {
                return "span";
            } else if(tag === "color_de_letra") {
                return "span";
            } else if(tag === "alineado") {
                return "span";
            } else if(tag === "lista_ordenada") {
                return "ol";
            } else if(tag === "lista_desordenada") {
                return "ul";
            } else if(tag === "punto") {
                return "li";
            } else if(tag === "flotacion") {
                return "span";
            } else if(tag === "link") {
                return "a";
            } else if(tag === "imagen") {
                return "img";
            } else if(tag === "codigo") {
                return "code";
            } else if(tag === "tabla") {
                return "table";
            } else if(tag === "fila") {
                return "tr";
            } else if(tag === "celda") {
                return "td";
            } 
        };
        const reducir_atributos_de_tag = function(tag, attrs) {
            if(tag === "negrita") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, []);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                }
            } else if(tag === "cursiva") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, []);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                }
            } else if(tag === "subrayado") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, []);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                }
            } else if(tag === "tachado") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, []);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                }
            } else if(tag === "fuente") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, ["de"]);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                    return ` style="font-size: ${sanitizar_dobles_comillas(attr.valor)};"`;
                }
            } else if(tag === "color_de_fondo") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, ["de"]);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                    return ` style="background-color: ${sanitizar_dobles_comillas(attr.valor)};"`;
                }
            } else if(tag === "color_de_letra") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, ["de"]);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                    return ` style="color: ${sanitizar_dobles_comillas(attr.valor)};"`;
                }
            } else if(tag === "alineado") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, ["a"]);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                    return ` style="text-align: ${sanitizar_dobles_comillas(attr.valor)};"`;
                }
            } else if(tag === "lista_ordenada") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, []);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                }
            } else if(tag === "punto") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, []);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                }
            } else if(tag === "lista_desordenada") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, []);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                }
            } else if(tag === "flotacion") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, ["a"]);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                    return ` style="width: 50%; float: ${sanitizar_dobles_comillas(attr.valor)};"`;
                }
            } else if(tag === "link") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, ["a"]);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                    return ` href="${sanitizar_dobles_comillas(attr.valor)}"`;
                }
            } else if(tag === "imagen") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, ["de"]);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                    return ` src="${sanitizar_dobles_comillas(attr.valor)}"`;
                }
            } else if(tag === "codigo") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, []);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                }
            } else if(tag === "tabla") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, []);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                }
            } else if(tag === "fila") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, ["expandida"]);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                    return ` rowspan="${sanitizar_dobles_comillas(attr.valor)}"`;
                }
            } else if(tag === "celda") {
                for(let i=0; i<attrs.length; i++) {
                    const attr = attrs[i];
                    const es_atributo_valido = comprobar_atributo(attr.atributo, ["expandida"]);
                    if(!es_atributo_valido) throw new Error(`Atributo «${attr.atributo}» no es válido para tag «${tag}»`);
                    return ` colspan="${sanitizar_dobles_comillas(attr.valor)}"`;
                }
            }
            return "";
        };
        const reducir_tag = function({ apertura, atributos, contenido }) {
            const nombre_de_tag = apertura.substr(1);
            const nombre_de_tag_html = reducir_nombre_de_tag(nombre_de_tag);
            let salida = "";
            salida += "<";
            salida += nombre_de_tag_html;
            salida += reducir_atributos_de_tag(nombre_de_tag, atributos);
            salida += ">";
            salida += contenido;
            salida += "</" + nombre_de_tag_html + ">";
            return salida;
        };
        const reducir_texto_normal = function(texto) {
            let salida = "";
            salida += texto
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/\r\n/g, "<br/>\n")
                .replace(/\n/g, "<br/>\n");
            return salida;
        };
        const reducir_texto_valido = function(tokens) {
            let salida = "";
            for(let i=0; i<tokens.length; i++) {
                const token = tokens[i];
                salida += token;
            }
            return salida;
        };


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
});
